import type { BooleanValueSource, NumberValueSource, StringValueSource, DateValueSource, TimeValueSource, DateTimeValueSource, EqualableValueSource, IntValueSource, DoubleValueSource, LocalDateValueSource, LocalTimeValueSource, LocalDateTimeValueSource, TypeSafeStringValueSource, StringNumberValueSource, StringIntValueSource, StringDoubleValueSource, ComparableValueSource, BigintValueSource, TypeSafeBigintValueSource } from "./expressions/values"
import { ITable, TableOrViewRef, TableOrViewOf, IWithView, __addWiths, __registerTableOrView } from "./utils/ITableOrView"
import type { int, double, LocalDate, LocalTime, LocalDateTime, stringInt, stringDouble } from "ts-extended-types"
import type { TypeAdapter } from "./TypeAdapter"
import type { AliasedTableOrView, OuterJoinSourceOf } from "./utils/tableOrViewUtils"
import { Column, ColumnWithDefaultValue, ComputedColumn, OptionalColumn, PrimaryKeyAutogeneratedColumn, PrimaryKeyColumn, __getColumnOfTable, __getColumnPrivate } from "./utils/Column"
import type { AnyDB, Oracle, PostgreSql, SqlServer, TypeSafeDB } from "./databases"
import { ColumnImpl } from "./internal/ColumnImpl"
import { database, tableName, tableOrViewRef, type, viewName } from "./utils/symbols"
import { IConnection } from "./utils/IConnection"
import { RawFragment } from "./utils/RawFragment"

interface TABLE<DB extends AnyDB, NAME extends string> extends TableOrViewRef<DB> {
    [tableName]: NAME
    [type]: 'table'
}

class TableOf<REF extends TABLE<AnyDB, any>> implements ITable<REF> {
    [database]: REF[typeof database]
    [type]: 'table'
    [viewName]: REF[typeof tableName]
    [tableOrViewRef]: REF
    /* implements __ITableOrViewPrivate as private members*/
    // @ts-ignore
    private __name: string
    // @ts-ignore
    private __as?: string
    // @ts-ignore
    private __type: 'table' = 'table'
    // @ts-ignore
    private __template?: RawFragment<any>

    constructor(name: string) {
        this.__name = name
    }

    as<ALIAS extends string>(as: ALIAS): AliasedTableOrView<this, ALIAS> {
        const result = new ((this as any).constructor)() as TableOf<any>
        result.__as = as
        return result as any
    }
    forUseInLeftJoin(): OuterJoinSourceOf<this, ''> {
        return this.forUseInLeftJoinAs('')
    }
    forUseInLeftJoinAs<ALIAS extends string>(as: ALIAS): OuterJoinSourceOf<this, ALIAS> {
        const result = new ((this as any).constructor)() as TableOf<any>
        result.__as = as
        for (const prop in result) {
            const column = __getColumnOfTable(result, prop)
            if (column) {
                __getColumnPrivate(column).__isOptional = true
            }
        }
        return result as any
    }

    protected column(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<REF, boolean> & Column
    protected column(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<REF, stringInt> & Column
    protected column(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & Column
    protected column(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<REF, int> & Column
    protected column(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<REF, number> & Column
    protected column(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'bigint', adapter?: TypeAdapter): TypeSafeBigintValueSource<REF, bigint> & Column
    protected column(name: string, type: 'bigint', adapter?: TypeAdapter): BigintValueSource<REF, bigint> & Column
    protected column(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<REF, stringDouble> & Column
    protected column(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & Column
    protected column(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<REF, double> & Column
    protected column(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<REF, number> & Column
    protected column(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<REF, string> & Column
    protected column(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<REF, string> & Column
    protected column(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<REF, LocalDate> & Column
    protected column(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<REF, Date> & Column
    protected column(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<REF, LocalTime> & Column
    protected column(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<REF, Date> & Column
    protected column(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<REF, LocalDateTime> & Column
    protected column(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<REF, Date> & Column
    protected column<T, TYPE_NAME extends string>(name: string, type: 'enum', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & Column
    protected column<T, TYPE_NAME extends string>(name: string, type: 'custom', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & Column
    protected column<T, TYPE_NAME extends string>(name: string, type: 'customComparable', typeName: TYPE_NAME, adapter?: TypeAdapter): ComparableValueSource<REF, T, TYPE_NAME> & Column
    protected column<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & Column
    protected column<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & Column
    protected column<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<REF, T, T> & Column    
    protected column(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<REF, T, TYPE_NAME> & Column */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return new ColumnImpl(this, name, adapter, adapter2)
        }
        return new ColumnImpl(this, name, type, adapter)
    }

    protected optionalColumn(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<REF, boolean | null | undefined> & OptionalColumn
    protected optionalColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<REF, stringInt | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string | null | undefined> & OptionalColumn
    protected optionalColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<REF, int | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<REF, number | null | undefined> & OptionalColumn
    protected optionalColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'bigint', adapter?: TypeAdapter): TypeSafeBigintValueSource<REF, bigint | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'bigint', adapter?: TypeAdapter): BigintValueSource<REF, bigint | null | undefined> & OptionalColumn
    protected optionalColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<REF, stringDouble | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string | null | undefined> & OptionalColumn
    protected optionalColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<REF, double | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<REF, number | null | undefined> & OptionalColumn
    protected optionalColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<REF, string | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<REF, string | null | undefined> & OptionalColumn
    protected optionalColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<REF, LocalDate | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<REF, Date | null | undefined> & OptionalColumn
    protected optionalColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<REF, LocalTime | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<REF, Date | null | undefined> & OptionalColumn
    protected optionalColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<REF, LocalDateTime | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<REF, Date | null | undefined> & OptionalColumn
    protected optionalColumn<T, TYPE_NAME extends string>(name: string, type: 'enum', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T | null | undefined, TYPE_NAME> & OptionalColumn
    protected optionalColumn<T, TYPE_NAME extends string>(name: string, type: 'custom', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T | null | undefined, TYPE_NAME> & OptionalColumn
    protected optionalColumn<T, TYPE_NAME extends string>(name: string, type: 'customComparable', typeName: TYPE_NAME, adapter?: TypeAdapter): ComparableValueSource<REF, T | null | undefined, TYPE_NAME> & OptionalColumn
    protected optionalColumn<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T | null | undefined, T> & OptionalColumn
    protected optionalColumn<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T | null | undefined, T> & OptionalColumn
    protected optionalColumn<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<REF, T | null | undefined, T> & OptionalColumn
    protected optionalColumn(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<REF, T | null | undefined, TYPE_NAME> & OptionalColumn */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asOptionalColumn()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asOptionalColumn()
    }

    protected columnWithDefaultValue(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<REF, boolean> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<REF, stringInt> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<REF, int> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<REF, number> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'bigint', adapter?: TypeAdapter): TypeSafeBigintValueSource<REF, bigint> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'bigint', adapter?: TypeAdapter): BigintValueSource<REF, bigint> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<REF, stringDouble> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<REF, double> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<REF, number> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<REF, string> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<REF, string> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<REF, LocalDate> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<REF, Date> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<REF, LocalTime> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<REF, Date> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<REF, LocalDateTime> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<REF, Date> & ColumnWithDefaultValue
    protected columnWithDefaultValue<T, TYPE_NAME extends string>(name: string, type: 'enum', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue
    protected columnWithDefaultValue<T, TYPE_NAME extends string>(name: string, type: 'custom', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue
    protected columnWithDefaultValue<T, TYPE_NAME extends string>(name: string, type: 'customComparable', typeName: TYPE_NAME, adapter?: TypeAdapter): ComparableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue
    protected columnWithDefaultValue<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & ColumnWithDefaultValue
    protected columnWithDefaultValue<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & ColumnWithDefaultValue
    protected columnWithDefaultValue<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<REF, T, T> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asColumnWithDefaultValue()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asColumnWithDefaultValue()
    }

    protected optionalColumnWithDefaultValue(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<REF, boolean> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<REF, stringInt> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<REF, int> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<REF, number> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'bigint', adapter?: TypeAdapter): TypeSafeBigintValueSource<REF, bigint> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'bigint', adapter?: TypeAdapter): BigintValueSource<REF, bigint> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<REF, stringDouble> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<REF, double> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<REF, number> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<REF, string> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<REF, string> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<REF, LocalDate> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<REF, Date> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<REF, LocalTime> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<REF, Date> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<REF, LocalDateTime> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<REF, Date> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue<T, TYPE_NAME extends string>(name: string, type: 'enum', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue<T, TYPE_NAME extends string>(name: string, type: 'custom', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue<T, TYPE_NAME extends string>(name: string, type: 'customComparable', typeName: TYPE_NAME, adapter?: TypeAdapter): ComparableValueSource<REF, T, TYPE_NAME> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<REF, T, T> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<REF, T, TYPE_NAME> & OptionalColumn & ColumnWithDefaultValue */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asOptionalColumnWithDefaultValue()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asOptionalColumnWithDefaultValue()
    }

    protected autogeneratedPrimaryKey(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<REF, boolean> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<REF, stringInt> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<REF, int> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<REF, number> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'bigint', adapter?: TypeAdapter): TypeSafeBigintValueSource<REF, bigint> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'bigint', adapter?: TypeAdapter): BigintValueSource<REF, bigint> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<REF, stringDouble> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<REF, double> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<REF, number> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<REF, string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<REF, string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<REF, LocalDate> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<REF, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<REF, LocalTime> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<REF, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<REF, LocalDateTime> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<REF, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey<T, TYPE_NAME extends string>(name: string, type: 'enum', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey<T, TYPE_NAME extends string>(name: string, type: 'custom', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey<T, TYPE_NAME extends string>(name: string, type: 'customComparable', typeName: TYPE_NAME, adapter?: TypeAdapter): ComparableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<REF, T, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asAutogeneratedPrimaryKey()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asAutogeneratedPrimaryKey()
    }

    protected primaryKey(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<REF, boolean> & PrimaryKeyColumn
    protected primaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<REF, stringInt> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & PrimaryKeyColumn
    protected primaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<REF, int> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<REF, number> & PrimaryKeyColumn
    protected primaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'bigint', adapter?: TypeAdapter): TypeSafeBigintValueSource<REF, bigint> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'bigint', adapter?: TypeAdapter): BigintValueSource<REF, bigint> & PrimaryKeyColumn
    protected primaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<REF, stringDouble> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & PrimaryKeyColumn
    protected primaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<REF, double> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<REF, number> & PrimaryKeyColumn
    protected primaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<REF, string> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<REF, string> & PrimaryKeyColumn
    protected primaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<REF, LocalDate> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<REF, Date> & PrimaryKeyColumn
    protected primaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<REF, LocalTime> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<REF, Date> & PrimaryKeyColumn
    protected primaryKey(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<REF, LocalDateTime> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<REF, Date> & PrimaryKeyColumn
    protected primaryKey<T, TYPE_NAME extends string>(name: string, type: 'enum', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & PrimaryKeyColumn
    protected primaryKey<T, TYPE_NAME extends string>(name: string, type: 'custom', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & PrimaryKeyColumn
    protected primaryKey<T, TYPE_NAME extends string>(name: string, type: 'customComparable', typeName: TYPE_NAME, adapter?: TypeAdapter): ComparableValueSource<REF, T, TYPE_NAME> & PrimaryKeyColumn
    protected primaryKey<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & PrimaryKeyColumn
    protected primaryKey<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & PrimaryKeyColumn
    protected primaryKey<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<REF, T, T> & PrimaryKeyColumn
    protected primaryKey(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<REF, T, TYPE_NAME> & PrimaryKeyColumn */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asPrimaryKey()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asPrimaryKey()
    }

    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<REF, boolean> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<REF, stringInt> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'int', adapter?: TypeAdapter): IntValueSource<REF, int> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<REF, number> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'bigint', adapter?: TypeAdapter): TypeSafeBigintValueSource<REF, bigint> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'bigint', adapter?: TypeAdapter): BigintValueSource<REF, bigint> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<REF, stringDouble> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<REF, double> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<REF, number> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<REF, string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'string', adapter?: TypeAdapter): StringValueSource<REF, string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<REF, LocalDate> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<REF, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, sequenceName: string, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<REF, LocalTime> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<REF, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, sequenceName: string, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<REF, LocalDateTime> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<REF, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence<T, TYPE_NAME extends string>(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'enum', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence<T, TYPE_NAME extends string>(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'custom', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence<T, TYPE_NAME extends string>(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'customComparable', typeName: TYPE_NAME, adapter?: TypeAdapter): ComparableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence<T>(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence<T>(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence<T>(this: TableOrViewOf<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<REF, T, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(name: string, sequenceName: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<REF, T, TYPE_NAME> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asAutogeneratedPrimaryKeyBySequence(sequenceName)
        }
        return (new ColumnImpl(this, name, type, adapter)).__asAutogeneratedPrimaryKeyBySequence(sequenceName)
    }

    protected computedColumn(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<REF, boolean> & ComputedColumn
    protected computedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<REF, stringInt> & ComputedColumn
    protected computedColumn(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & ComputedColumn
    protected computedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<REF, int> & ComputedColumn
    protected computedColumn(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<REF, number> & ComputedColumn
    protected computedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'bigint', adapter?: TypeAdapter): TypeSafeBigintValueSource<REF, bigint> & ComputedColumn
    protected computedColumn(name: string, type: 'bigint', adapter?: TypeAdapter): BigintValueSource<REF, bigint> & ComputedColumn
    protected computedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<REF, stringDouble> & ComputedColumn
    protected computedColumn(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string> & ComputedColumn
    protected computedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<REF, double> & ComputedColumn
    protected computedColumn(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<REF, number> & ComputedColumn
    protected computedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<REF, string> & ComputedColumn
    protected computedColumn(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<REF, string> & ComputedColumn
    protected computedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<REF, LocalDate> & ComputedColumn
    protected computedColumn(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<REF, Date> & ComputedColumn
    protected computedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<REF, LocalTime> & ComputedColumn
    protected computedColumn(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<REF, Date> & ComputedColumn
    protected computedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<REF, LocalDateTime> & ComputedColumn
    protected computedColumn(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<REF, Date> & ComputedColumn
    protected computedColumn<T, TYPE_NAME extends string>(name: string, type: 'enum', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & ComputedColumn
    protected computedColumn<T, TYPE_NAME extends string>(name: string, type: 'custom', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T, TYPE_NAME> & ComputedColumn
    protected computedColumn<T, TYPE_NAME extends string>(name: string, type: 'customComparable', typeName: TYPE_NAME, adapter?: TypeAdapter): ComparableValueSource<REF, T, TYPE_NAME> & ComputedColumn
    protected computedColumn<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & ComputedColumn
    protected computedColumn<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T, T> & ComputedColumn
    protected computedColumn<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<REF, T, T> & ComputedColumn
    protected computedColumn(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<REF, T, TYPE_NAME> & ComputedColumn */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return new ColumnImpl(this, name, adapter, adapter2).__asComputedColumn()
        }
        return new ColumnImpl(this, name, type, adapter).__asComputedColumn()
    }

    protected optionalComputedColumn(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<REF, boolean | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<REF, stringInt | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<REF, int | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<REF, number | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'bigint', adapter?: TypeAdapter): TypeSafeBigintValueSource<REF, bigint | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(name: string, type: 'bigint', adapter?: TypeAdapter): BigintValueSource<REF, bigint | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<REF, stringDouble | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<REF, number | string | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<REF, double | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<REF, number | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<REF, string | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<REF, string | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<REF, LocalDate | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<REF, Date | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<REF, LocalTime | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<REF, Date | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(this: TableOrViewOf<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<REF, LocalDateTime | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<REF, Date | null | undefined> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn<T, TYPE_NAME extends string>(name: string, type: 'enum', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T | null | undefined, TYPE_NAME> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn<T, TYPE_NAME extends string>(name: string, type: 'custom', typeName: TYPE_NAME, adapter?: TypeAdapter): EqualableValueSource<REF, T | null | undefined, TYPE_NAME> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn<T, TYPE_NAME extends string>(name: string, type: 'customComparable', typeName: TYPE_NAME, adapter?: TypeAdapter): ComparableValueSource<REF, T | null | undefined, TYPE_NAME> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T | null | undefined, T> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<REF, T | null | undefined, T> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<REF, T | null | undefined, T> & OptionalColumn & ComputedColumn
    protected optionalComputedColumn(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<REF, T | null | undefined, TYPE_NAME> & OptionalColumn & ComputedColumn */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asOptionalColumn().__asOptionalComputedColumn()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asOptionalColumn().__asOptionalComputedColumn()
    }

    // @ts-ignore
    private __addWiths(withs: Array<IWithView<any>>): void {
        __addWiths(this.__template, withs)
    }

    // @ts-ignore
    private __registerTableOrView(requiredTablesOrViews: Set<ITableOrView<any>>): void {
        requiredTablesOrViews.add(this)
        __registerTableOrView(this.__template, requiredTablesOrViews)
    }
}

export class Table<Connection extends IConnection<any>, NAME extends string> extends TableOf<TABLE<Connection[typeof database], NAME>> {
    constructor(name: string) {
        super(name)
    }
}