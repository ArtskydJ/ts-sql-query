import type { ITableOrView, TableOrViewRef } from "./ITableOrView"
import type { ToSql } from "../sqlBuilders/SqlBuilder"
import type { IValueSource, __ValueSourcePrivate } from "../expressions/values"
import type { autogeneratedPrimaryKeyValue, computedValue, hasDefaultValue, optionalValue, primaryKeyValue, type } from "./symbols"
import type { AnyDB } from "../databases"

export interface Column {
    [type]: 'column'
}

export interface ColumnWithDefaultValue extends Column {
    [hasDefaultValue]: true
}

export interface OptionalColumn extends Column {
    [optionalValue]: true
}

export interface PrimaryKeyAutogeneratedColumn extends Column {
    [autogeneratedPrimaryKeyValue]: true
}

export interface PrimaryKeyColumn extends Column {
    [primaryKeyValue]: true
}

export interface ComputedColumn extends Column {
    [computedValue]: true
}

export interface __ColumnPrivate extends __ValueSourcePrivate {
    __isColumn: true
    __name: string
    __tableOrView: ITableOrView<any>
    __isOptional: boolean
    __hasDefault: boolean
    __isPrimaryKey: boolean
    __isAutogeneratedPrimaryKey: boolean
    __isComputed: boolean
    __sequenceName?: string
}

export function isColumn(value: any): value is IValueSource<TableOrViewRef<AnyDB>, undefined> & Column {
    if (value === undefined || value === null) {
        return false
    }
    if (typeof value === 'object' && typeof value.__isResultOptional === 'function') {
        return value.__isColumn
    }
    return false
}

export function __getColumnPrivate(column: Column): __ColumnPrivate {
    return column as any
}

export function __getColumnOfTable(table: ITableOrView<any>, column: string): (Column & ToSql) | undefined {
    const result = (table as any)[column]
    if (!result) {
        return undefined
    }
    if (typeof result !== 'object') {
        return undefined
    }
    if (result.__isColumn) {
        return result as any
    } else {
        return undefined
    }
}